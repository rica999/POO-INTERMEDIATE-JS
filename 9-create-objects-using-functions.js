/*-----------------Creaci√≥n de objetos usando funciones-------------------*/

function createStudent({
    name,
    age
} = {}) { //define que si no se env√≠a nada por argumento, entonces se crear√° un objeto vaci√≥, evitando que salga un error
    return {
        name,
        age
    }
}

const rica = createStudent();
console.log(rica); //{ name: undefined, age: undefined }

//Si es que se desea si o si pasar un dato obligatorio, se puede crear un funci√≥n que retorne error

function requiredParam(param) {
    throw new Error(param + " es obligatorio"); // throw new Error es la forma de disparar errores en JS
}

//Entonces esta funci√≥n se puede pasar por valor de una propiedad

function createStudent2({
    name,
    age = requiredParam("age")
} = {}) { //en este caso ya no servir√≠a porque se tiene que mandar un valor obligatorio
    return {
        name,
        age
    }
}

//const terry = createStudent2(); //Error: age es obligatorio
const luis = createStudent2({age:12});
console.log(luis); //{ name: undefined, age: 12 }

// ### Evitar modificaciones en atributos de objetos

/*Modificaremos la funci√≥n creada anteriormente con la que pod√≠amos generar nuevos objetos.
Esto con la finalidad de separar los atributos que queremos que sean privados (por ahora solo el atributo name) y p√∫blicos.
Adem√°s de crear 2 funciones: una para poder modificar el atributo privado y otra para obtener el valor de esa propiedad privada:*/

function createStudent3({
    name,
    age
} = {}) {
    const privateAttributes = { //m√©todos privados
        "_name" : name,
    }
    const publicAttributes = {//lo que se podr√° ver y manipular
        age,
        readName(){
            return privateAttributes["_name"];
        },
        changeName(param) {
            privateAttributes["_name"] = param;
        }
    }
    return publicAttributes;
}

const alfonso = createStudent3({name : "alfonso",age : 14});

console.log(alfonso);
/*
{
    age: 14,
    readName: [Function: readName],
    changeName: [Function: changeName]
}
*/
console.log(alfonso.readName()); //alfonso
alfonso.changeName("alfonsito"); //alfonso //solo a trav√©s del m√©todo changeName es posible cambiar el nombre, ya que no es posible hacerlo de manera directa
alfonso._name = "GOKU"; //No cambiar√° de nombre
console.log(alfonso.readName()); //alfonsito

//Sin embargo si lo dejamos as√≠, se podr√° modificar el valor de m√©todos, por lo que se usar√° Object.defineProperty() para evitar ello

Object.defineProperty(alfonso,"readName",{
    writable : false,
    configurable : false
})
Object.defineProperty(alfonso,"changeName",{
    writable : false,
    configurable : false
})

console.log(Object.getOwnPropertyDescriptors(alfonso));

/*
{
    age: { value: 14, writable: true, enumerable: true, configurable: true },
    readName: {
        value: [Function: readName],
        writable: false,
        enumerable: true,
        configurable: false
    },
    changeName: {
        value: [Function: changeName],
        writable: false,
        enumerable: true,
        configurable: false
    },
    _name: {
        value: 'GOKU',
        writable: true,
        enumerable: true,
        configurable: true
    }
}
*/

// ### Uso de get y set

function createStudent4({
    name,
    age
} = {}) {
    const privateAttributes = {
        "_name" : name,
    }
    const publicAttributes = {
        age,
        get name() { //en vez de los m√©todos readName y changeName
            return privateAttributes["_name"];
        },
        set name(newName) {
            if (newName.length != 0) { // üëàüëà
                privateAttributes["_name"] = newName;
            } else {
                console.warn("Tu nombre debe tener al menos 1 caracter");
            }
        },
    }
    return publicAttributes;
}

const efrain = createStudent4({name : "efrain",age : 20});

console.log(efrain.name); // Se ejecuta el GETTER
efrain.name = "Rigoberto"; // Se ejecuta el SETTER
console.log(efrain.name);

//Si se usa Object.defineProperty si se podr√° modificar el nombre

Object.defineProperty(efrain,"name",{
    value:"LOL"
})

console.log(efrain.name); //LOL